#+TITLE: Desktop
#+PROPERTY: header-args :tangle config/.config/emacs/desktop.el
My desktop environment as managed by EXWM. In this file you will also find any desktop configurations required to make emacs into a fully functioning desktop environment as I see it.
* Inbox
** TODO Check =EXWM= =gcs-done= and increase threshold if nesisarry
- [ ] Capture exwm start =gcs-done=.
- [ ] Capture exwm finish =gcs-done=.
- [ ] Subtract the two values into a new variable
** Windows
*** TODO Window name hook
*** TODO workspace spawn rules for applications
*** TODO Find unicode icons for workspace
** General
*** TODO Look into =exwm-desktop-environment= binding commands
** Keybindings
* Preamble
[[https://github.com/daviwil/emacs-from-scratch][Emacs From Scratch Repo]]
#+begin_src emacs-lisp
  ;; NOTE: desktop.el is now generated from Desktop.org.  Please edit that file
  ;;       in Emacs and desktop.el will be generated automatically!
#+end_src



*  EXWM
#+begin_src emacs-lisp
  (defvar exwm-gcs-start-var gcs-done "numer of gc's done at the begining of destkop.el")
  (server-start)
  (defvar my/exwm-config (expand-file-name ".dotfiles/Desktop.org" (getenv "HOME")) "EXWM Configuration file name")
  (add-to-list 'default-frame-alist '(alpha 90 90))
  (my/leader-def
    "h C-f" '((lambda () (interactive)
                 (find-file my/exwm-config)) :wk "open desktop configuration"))
#+end_src

[[https://github.com/daviwil/emacs-from-scratch/raw/master/show-notes/Emacs-Desktop-02.org][Emacs Desktop Part 2 Show Notes]]
[[https://github.com/daviwil/emacs-from-scratch/raw/master/show-notes/Emacs-Desktop-03.org][efs part 3]]
** Autostart


#+begin_src emacs-lisp :noweb yes
  <<picom-integration>>
  <<polybar-integration>>
  (defun my/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))
  
  (defun my/exwm-init-hook ()
    (eshell)
    (my/start-panel)
    (my/start-picom))
  
  ;; (my/run-in-background "picom")
  ;; (my/run-in-background "xclip")
  ;; (my/run-in-background (concat (getenv "HOME") "/" ".scripts/wallpaper.sh draw")))
  #+end_src

*** Picom integration
#+name: picom-integration
#+begin_src emacs-lisp :tangle no
  (defvar my/picom-pid nil
    "picom process id, if any")
  (defun my/kill-picom () "kills the runnign picom procrss"
         (interactive)
         (when my/picom-pid
           (ignore-errors
             (kill-process my/picom-pid)))
         (setq my/picom-pid nil))
  (defun my/start-picom () "starts picom pointing to the default configuation location"
         (interactive)
         (my/kill-picom)
         (setq my/picom-pid (start-process-shell-command "picom" nil "picom")))
  (defun my/toggle-picom () "Toggles picom"
  (interactive)
  (if my/picom-pid
  (my/kill-picom)
  (my/start-picom)))
#+end_src

** WM

#+begin_src emacs-lisp :noweb yes
  (defun my/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))
  
  (use-package desktop-environment
    :defer t)
  (use-package exwm
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 5)
    (add-hook 'exwm-init-hook #'my/exwm-init-hook)
    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'my/exwm-update-class)
    ;; Update panel indicator when workspace changes
    (add-hook 'exwm-workspace-switch-hook #'my/send-polybar-exwm-workspace)
    (add-hook 'exwm-init-hook #'my/post-config)
  
    (desktop-environment-mode)
    <<input-prefix-keys>>
    <<global-keys>>
    (exwm-enable))
  
#+end_src
** Checks
#+begin_src emacs-lisp
  (defvar exwm-gc-end-var gcs-done "number of gc's done at end of desktop.el in total")
  (defvar my/desktop-gs (- exwm-gc-end-var exwm-gcs-start-var) "number of gc's done durring desktop.el evaluation")
#+end_src

** Keybindings
*** Input Prefix Keys

#+NAME: input-prefix-keys
#+begin_src emacs-lisp :tangle no
  ;; These keys should always pass through to Emacs
  (setq exwm-input-prefix-keys
        '(?\C-x
          ?\C-u
          ?\C-h
          ?\C-w
          ?\M-x
          ?\M-`
          ?\M-&
          ?\M-:
          ?\C-\ ))  ;; Ctrl+Space
  
  ;;    Ctrl+ Q will enable the next key to
  ;;    be sent directly
  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)
  
#+end_src

*** Global Keys

#+NAME: global-keys
#+begin_src emacs-lisp :tangle no :noweb yes
  ;; Set up global key bindings.  These always work, no matter the input state!
  ;; Keep in mind that changing this list after EXWM initializes has no effect.
  (setq exwm-input-global-keys
        `(
          ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
          ([?\s-r] . exwm-reset)
  
          ;; Move between windows
          ([?\s-h] . windmove-left)
          ([?\s-l] . windmove-right)
          ([?\s-k] . windmove-up)
          ([?\s-j] . windmove-down)
  
          ;; Launch applications via shell command
          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command command nil command)))
  
          ;; Switch workspace
          ([?\s-w] . exwm-workspace-switch)
  
          ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))
  <<exwm-input-set-keys>>
#+end_src

**** input set keys
#+NAME: exwm-input-set-keys
#+begin_src emacs-lisp :tangle no
  
  (exwm-input-set-key (kbd "s-SPC") 'app-launcher-run-app) ;; Set XDG_PATH variables
  (exwm-input-set-key (kbd "s-y") '(lambda () (interactive)
         (start-process-shell-command "Wallpaper" nil "~/.scripts/wallpaper.sh set")))
  (exwm-input-set-key (kbd "s-p") 'my/toggle-panel)
  (exwm-input-set-key (kbd "s-g") 'pass)
  (exwm-input-set-key (kbd "C-s-p") 'my/toggle-picom)
  (exwm-input-set-key (kbd "s-s") '(lambda (query)
                                     (interactive "sWeb Search: ")
                                     (start-process-shell-command "qutebrowser" nil (concat "qutebrowser ""\"" query "\""))))
  (exwm-input-set-key (kbd "s-f") '(lambda ()
                                     (interactive)
                                     (start-process-shell-command "firefox" nil "firefox youtube.com")))
#+end_src

* Polybar
:PROPERTIES:
:header-args: :tangle config/.config/polybar/config :noweb yes
:END:
#+NAME: polybar-header
#+begin_src emacs-lisp :tangle no
(my/--generate-file-header "Desktop.org" "config" "#")
#+end_src
Docs: https://github.com/polybar/polybar
#+begin_src conf-toml :noweb yes
  <<polybar-header()>>
  
  [settings]			
  screenchange-reload = false
  
  [global/wm]
  margin-top = 0
  margin-bottom = 0
  
  [colors]
  background = #f0232635
  background-alt = #576075
  foreground = #A6Accd
  foreground-alt = #555
  primary = #ffb52a
  secondary = #e60053
  alert = #bd2c40
  underline-1 = #c792ea
  
  [bar/panel]
  width = 100%
  height = 20
  offset-x = 0
  offset-y = 0
  fixed-center = true
  enable-ipc = true
  
  background = ${colors.background}
  foreground = ${colors.foreground}
  
  line-size = 2
  line-color = #f00
  
  border-size = 0
  border-color = #00000000
  
  padding-top = 5
  padding-left = 1
  padding-right = 1
  
  module-margin = 1
  
  font-0 = "Cantarell:size=14:weight=bold;2"
  font-1 = "Font Awesome:size=12;2"
  font-2 = "Material Icons:size=18;5"
  font-3 = "Fira Mono:size=11;-3"
  
  modules-right = cpu temperature battery date
  
  tray-position = right
  tray-padding = 2
  tray-maxsize = 28
  
  cursor-click = pointer
  cursor-scroll = ns-resize
  modules-left = exwm-workspace
  
  [module/exwm-workspace]
  type = custom/ipc
  hook-0 = emacsclient -e "exwm-workspace-current-index" | sed -e 's/^"//' -e 's/"$//'
  initial = 1
  format-underline = ${colors.underline-1}
  format-padding = 
  [module/cpu]
  type = internal/cpu
  interval = 2
  format = <label> <ramp-coreload>
  format-underline = ${colors.underline-1}
  click-left = emacsclient -e "(proced)"
  label = %percentage:2%%
  ramp-coreload-spacing = 0
  ramp-coreload-0 = ▁
  ramp-coreload-0-foreground = ${colors.foreground-alt}
  ramp-coreload-1 = ▂
  ramp-coreload-2 = ▃
  ramp-coreload-3 = ▄
  ramp-coreload-4 = ▅
  ramp-coreload-5 = ▆
  ramp-coreload-6 = ▇
  
  [module/date]
  type = internal/date
  interval = 5
  
  date = "%a %b %e"
  date-alt = "%A %B %d %Y"
  
  time = %l:%M %p
  time-alt = %H:%M:%S
  
  format-prefix-foreground = ${colors.foreground-alt}
  format-underline = ${colors.underline-1}
  
  label = %date% %time%
  
  [module/battery]
  type = internal/battery
  battery = BAT0
  adapter = ADP1
  full-at = 98
  time-format = %-l:%M
  
  label-charging = %percentage%% / %time%
  format-charging = <animation-charging> <label-charging>
  format-charging-underline = ${colors.underline-1}
  
  label-discharging = %percentage%% / %time%
  format-discharging = <ramp-capacity> <label-discharging>
  format-discharging-underline = ${self.format-charging-underline}
  
  format-full = <ramp-capacity> <label-full>
  format-full-underline = ${self.format-charging-underline}
  
  ramp-capacity-0 = 
  ramp-capacity-1 = 
  ramp-capacity-2 = 
  ramp-capacity-3 = 
  ramp-capacity-4 = 
  
  animation-charging-0 = 
  animation-charging-1 = 
  animation-charging-2 = 
  animation-charging-3 = 
  animation-charging-4 = 
  animation-charging-framerate = 750
  
  [module/temperature]
  type = internal/temperature
  thermal-zone = 0
  warn-temperature = 60
  
  format = <label>
  format-underline = ${colors.underline-1}
  format-warn = <label-warn>
  format-warn-underline = ${self.format-underline}
  
  label = %temperature-c%
  label-warn = %temperature-c%!
  label-warn-foreground = ${colors.secondary}
#+end_src

** Polybar integration
#+NAME: polybar-integration
#+begin_src emacs-lisp :tangle no
  ;; (defun efs/polybar-exwm-workspace ()
  ;;   (pcase exwm-workspace-current-index
  ;;     (0 "")
  ;;     (1 "")
  ;;     (2 "")
  ;;     (3 "")
  ;;     (4 "")))
  (defun my/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))
  
  (defun my/send-polybar-exwm-workspace ()
    (my/send-polybar-hook "exwm-workspace" 1))
  
  (defvar my/polybar-process nil
    "Holds the process of the running Polybar instance, if any")
  
  (defun my/kill-panel ()
    (interactive)
    (when my/polybar-process
      (ignore-errors
        (kill-process my/polybar-process)))
    (setq my/polybar-process nil))
  
  (defun my/start-panel ()
    (interactive)
    (my/kill-panel)
    (setq my/polybar-process (start-process-shell-command "polybar" nil "polybar panel")))
  
  (defun my/toggle-panel ()
    (interactive)
    (if my/polybar-process
        (my/kill-panel)
      (my/start-panel)))
  
  
#+end_src

** GUIX
:PROPERTIES:
:header-args: :noweb-ref packages :tangle no
:END:
#+begin_src scheme
  "polybar"
#+end_src

* System Environment Configuration 
Here are listed the System level configruation requirments in order for emacs to fuction the way I expect it to.
** Xsession
:PROPERTIES:
:header-args: :tangle config/.xsession :tangle-mode (identity #o755)
:END:
#+NAME: xsession-header
#+begin_src emacs-lisp :tangle no
(my/--generate-file-header "Desktop.org" ".xsession" "#")
#+end_src

#+begin_src sh :noweb yes
  <<xsession-header()>>
#+end_src
#+begin_src sh 
  dunst &
  xclip &
  $HOME/.scripts/wallpaper.sh draw
  exec dbus-launch --exit-with-session emacs -mm -exwm --debug-init
#+end_src

** Ctrl and CapsLock Switch
*** Xmodmap
#+begin_src conf-space :tangle config/.Xmodmap :noweb yes
  clear lock
  clear control
  keycode 66 = Control_L
  add control = Control_L
  add Lock = Control_R
  keycode  23 = BackSpace BackSpace BackSpace BackSpace
  keycode  22 = Tab ISO_Left_Tab Tab ISO_Left_Tab
#+end_src
*** on arch =/etc/X11/xorg.conf.d/90-custom-kbd.conf=
#+begin_src conf-space :tangle no
  Section "InputClass"
  Identifier "keyboard defaults"
  MatchIsKeyboard "on"
  Option "XkbOptions" "ctrl:swapcaps"
  EndSection
#+end_src
* Manifest
#+NAME: desktop-manifest-header
#+begin_src emacs-lisp :tangle no
 (my/--generate-file-header "Desktop.org" "desktop.scm") 
#+end_src
config/.config/guix/manifests/desktop.scm
#+begin_src scheme :tangle config/.config/guix/manifests/desktop.scm :noweb yes
  <<desktop-manifest-header()>>

  (specifications->manifest
   (list "dunst"
         "brightnessctl"
         "libreoffice"
         "perl-file-mimeinfo"
         "network-manager"
         "flatpak"
         "picom"
         "pavucontrol"
         "xclip"
         <<packages>>
         "xwallpaper"
         "sxiv"))
#+end_src

#+NAME: browser-manifest-header
#+begin_src emacs-lisp :tangle no
  (my/--generate-file-header "Desktop.org" "browsers.scm")
#+end_src
config/.config/guix/manifests/browsers.scm
#+begin_src scheme :tangle config/.config/guix/manifests/browsers.scm :noweb yes
  <<browser-manifest-header()>>

  (specifications->manifest
   (list "qutebrowser"
         "firefox"))
#+end_src
