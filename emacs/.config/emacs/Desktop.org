#+TITLE: Desktop
#+SUBTITLE: Requires Emacs.org
#+PROPERTY: header-args :tangle ./desktop.el
* Inbox
** TODO Polybar
** TODO Check =EXWM= =gcs-done= and increase threshold if nesisarry
- [ ] Capture exwm start =gcs-done=.
- [ ] Capture exwm finish =gcs-done=.
- [ ] Subtract the two values into a new variable
** DONE crete helper functions for power control 
- [X] Power Off
- [X] Restart
- [X] Suspend
*** DONE Keybindings
- [X] Power Off
- [X] Restart
- [X] Suspend
** Dotfiles repo
* Preamble
[[https://github.com/daviwil/emacs-from-scratch][Emacs From Scratch Repo]]
#+begin_src emacs-lisp
  ;; NOTE: desktop.el is now generated from Desktop.org.  Please edit that file
  ;;       in Emacs and desktop.el will be generated automatically!
#+end_src


#+begin_src emacs-lisp
  (defvar my/exwm-config "Desktop.org" "EXWM Configuration file name")
  (add-to-list 'default-frame-alist '(alpha 90 90))
  (my/leader-def
    "h C-f" '((lambda () (interactive)
                 (find-file (concat my/user-emacs-directory my/exwm-config))) :wk "open desktop configuration")) 
#+end_src

** Autosave Hook

#+begin_src emacs-lisp
    (with-eval-after-load 'org
      (defun my/org-babel-tangle-desktop ()
        (when (string-equal (buffer-file-name)
                        (expand-file-name my/exwm-config))
          (let ((org-confirm-babel-evaluate nil))
            (org-babel-tangle))))
      (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook
                                            #'my/org-babel-tangle-desktop))))
#+end_src

*  EXWM
[[https://github.com/daviwil/emacs-from-scratch/raw/master/show-notes/Emacs-Desktop-02.org][Emacs Desktop Part 2 Show Notes]]
[[https://github.com/daviwil/emacs-from-scratch/raw/master/show-notes/Emacs-Desktop-03.org][efs part 3]]
** Autostart

#+begin_src emacs-lisp
  (defvar my/exwm-auto-start-apps '(("xmodmap" . "xmodmap ~/.Xmodmap")))

  (defun my/exwm-auto-start ()
   (interactive)
   (dolist (process my/exwm-auto-start-apps)
     (start-process-shell-command (car process) nil (cdr process))))

#+end_src

** WM

#+begin_src emacs-lisp
  (defun my/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (use-package exwm
    :config
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 5)

    ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'my/exwm-update-class)

#+end_src

*** Input Prefix Keys

#+begin_src emacs-lisp
   ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
      '(?\C-x
         ?\C-u
         ?\C-h
         ?\M-x
         ?\M-`
         ?\M-&
         ?\M-:
         ?\C-\ ))  ;; Ctrl+Space

  ;;    Ctrl+ Q will enable the next key to
  ;;    be sent directly
   (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

#+end_src

*** Global Keys

#+begin_src emacs-lisp
  ;; Set up global key bindings.  These always work, no matter the input state!
  ;; Keep in mind that changing this list after EXWM initializes has no effect.
  (setq exwm-input-global-keys
        `(
          ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
          ([?\s-r] . exwm-reset)

          ;; Move between windows
          ([?\s-h] . windmove-left)
          ([?\s-l] . windmove-right)
          ([?\s-k] . windmove-up)
          ([?\s-j] . windmove-down)

          ;; Launch applications via shell command
          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command command nil command)))

          ;; Switch workspace
          ([?\s-w] . exwm-workspace-switch)

          ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))

  (exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)

  (defun exwm-poweroff ()
    (interactive)
    (when (yes-or-no-p "Power down system? ")
      (start-process-shell-command "systemctl" nil "systemctl poweroff")))
  (exwm-input-set-key (kbd "C-s-p") 'exwm-poweroff)

  (defun exwm-suspend ()
    (interactive)
    (when (y-or-n-p "Suspend systeM? ")
      (start-process-shell-command "systemctl" nil "systemctl suspend")))
  (exwm-input-set-key (kbd "s-p") 'exwm-suspend)

  (defun exem-sys-restart () "Restarts the operating system"
         (interactive)
         (when (yes-or-no-p "Restart system? ")
           (start-process-shell-command "systemctl" nil "systemctl restart")))
  (exwm-input-set-key (kbd "M-s-p") 'exwm-sys-restart)
  (exwm-input-set-key (kbd "s-q") 'exwm-restart)

#+end_src
*** DELIM

#+begin_src emacs-lisp
  (exwm-enable)
  (my/exwm-auto-start))
#+end_src

** Status Bar
#+begin_src emacs-lisp
  ;; Show battery status in the mode line
  (display-battery-mode 1)

  ;; Show the time and date in modeline
  (setq display-time-day-and-date t)
  (display-time-mode 1)
  ;; Also take a look at display-time-format and format-time-string
#+end_src

* Runtime Optimization
#+begin_src emacs-lisp
  (my/post-config)
#+end_src
* System Configuration Requirements
Here are listed the System level configruation requirments in order for emacs to fuction the way I expect it to.
** Xinirc
#+begin_src conf-unix :tangle no
dunst &
picom &
xclip &
/usr/libexec/polkit-mate-authentication-agent-1 &
cbatticon &
$HOME/.scripts/wallpaper.sh draw
exec dbus-launch --exit-with-session emacs -mm -exwm --debug-init
#+end_src
** Ctrl and CapsLock Switch
*** Xmodmap
#+begin_src conf-space :tangle no
keycode  23 = BackSpace BackSpace BackSpace BackSpace
keycode  22 = Tab ISO_Left_Tab Tab ISO_Left_Tab
#+end_src
*** =/etc/X11/xorg.conf.d/90-custom-kbd.conf=
#+begin_src conf-space :tangle no
Section "InputClass"
    Identifier "keyboard defaults"
    MatchIsKeyboard "on"
    Option "XkbOptions" "ctrl:swapcaps"
EndSection
#+end_src
