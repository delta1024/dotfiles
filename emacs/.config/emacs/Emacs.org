#+TITLE: Jake's Emacs Config
#+AUTHOR: Jacob Stannix
#+PROPERTY: header-args :tangle init.el 
* Preamble
The following is my emacs config, feel free to take as much or as little as you like.

For a very comprehensive configuratoin example please check out the [[https://www.youtube.com/watch?v=74zOY-vgkyw&list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs From Scratch playlist]] on the [[https://www.youtube.com/c/SystemCrafters][System Crafters Youtube Channel]].

#+begin_src emacs-lisp

   ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
   ;;       in Emacs and init.el will be generated automatically!

  (defvar my/org-font "Cantarell" "org-mode's variable pitched font name")
  (defvar my/user-font "FiraCode NerdFont" "emacs's fixed width font")
  (defvar my/font-size 115 "font size for emacs")
  (defvar my/emacs-file "Emacs.org" "emacs user file name")
  (defvar my/user-emacs-directory "~/.dotfiles/emacs/.config/emacs/" "Hard coded path to my emacs config")
#+end_src

* UI Improvements

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  ;; Redirect custom output
  (setq custom-file (concat user-emacs-directory "emacs-custom.el"))

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)

  ;; sets fixed-width font
  (set-face-attribute 'default nil :font my/user-font :height my/font-size)


  ;; Disables the visual bell
  (setq visible-bell ())

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (column-number-mode)
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* Package and Use-Package
Packages maintained by =use-package=.

#+Begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))


  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  (use-package swiper)
#+end_src

* Org Mode

#+begin_src emacs-lisp
(use-package org
  :init
  (defun my/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))
#+end_src

** Org Font Setup

  #+begin_src emacs-lisp
  (defun my/org-font-setup ()
    (dolist (face '((org-level-1 . 1.2)
                      (org-level-2 . 1.1)
                      (org-level-3 . 1.05)
                      (org-level-4 . 1.0)
                      (org-level-5 . 1.1)
                      (org-level-6 . 1.1)
                      (org-level-7 . 1.1)
                      (org-level-8 . 1.1)))
        (set-face-attribute (car face) nil :font my/org-font :weight 'regular :height (cdr face)))

      ;; Ensure that anything that should be fixed-pitch in Org files appears that way
      (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
      (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
      (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
  #+end_src

** Hooks and Config

  #+begin_src emacs-lisp
  :hook (org-mode . my/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")
  (setq org-hide-emphasis-markers t)
  (my/org-font-setup))
  #+end_src
  
** Org Bullets

#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Visual Fill Colum
#+begin_src emacs-lisp
(use-package visual-fill-column
  :init
  (defun my/org-mode-visual-fill () 
    (setq visual-fill-column-width 115
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))
  :hook (org-mode . my/org-mode-visual-fill))
#+end_src

** Org Babel
#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)))
(setq org-confirm-babel-evaluate nil)
#+end_src

** Org Config
Automatically tangle our Emacs.org config file when we save it
#+begin_src emacs-lisp 
(defun my/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name (concat user-emacs-directory my/emacs-file)))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config)))
#+end_src

* Other Packages
** Projectile

#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/devel")
    (setq projectile-project-search-path '("~/devel"))))
#+end_src

*** Counsel-Projectile
#+begin_src emacs-lisp
(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

** Magit

#+begin_src emacs-lisp
(use-package magit
  :config
  (define-key my-leader-map "g" '("magit" . ()))
  :general
  (my-leader-map
    "g g" '(magit :which-key "status")))
#+end_src

*** TODO Forge
 NOTE: Make sure to configure a GitHub token before using this package!
 - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
 - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started

 #+begin_src emacs-lisp :tangle no
 (use-package forge)
 #+end_src

** Evil

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :demand t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  :config
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (evil-mode)
  :bind
  ([remap evil-search-forward] . swiper)
  ([remap evil-search-backward] . swiper-backward))
#+end_src

*** Evil Collection

#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init)) 
#+end_src

;; (use-package hydra)

** General

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t)
  (general-create-definer my/leader-def
			  :keymaps '(normal insert visual emacs)
			  :prefix "SPC"
			  :non-normal-prefix "C-SPC"
			  :prefix-command 'my-leader-command
			  :prefix-map 'my-leader-map)
  (my/leader-def
    "f"   '(nil :which-key "file system")
    "f f" '(counsel-find-file :which-key "save-file")
    "f s" '(save-buffer :which-key "save file")
    "h"   '(nil :which-key "config options")
    "h f" '((lambda () (interactive) (find-file (concat user-emacs-directory my/emacs-file))) :which-key "open config file")
    "a"   '(eshell :which-key "eshell")
    ":"   '(counsel-M-x :which-key "M-x")
    "b" '(counsel-switch-buffer :wk "switch buffers")
#+end_src

** Ivy and Counsel

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (:map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config)

  (use-package counsel
    :after general
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-switch-buffer-other-window)))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

** Which-key

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.3))
#+end_src

** helpful

#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

** Doom
*** Doom Themes

#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-challenger-deep t))
#+end_src

*** Doom Modeline 

NOTE: The first time you load your configuration on a new machine, you'll
need to run the following command interactively so that mode line icons
display correctly:

=M-x all-the-icons-install-fonts=

#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode t)
    :custom ((doom-mode-line-height 13)))
#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Custom
This block must remain at the bottom of the file or your settings will not be loaded properly.
#+begin_src emacs-lisp 
(load custom-file :noerror)
#+end_src
