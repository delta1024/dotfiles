#+TITLE: GNU Guix System Configuration
#+AUTHOR: Jacob Stannix
#+PROPERTY: header-args :tangle ./config/.config/guix/system.scm
* Inbox
** OS
*** Users
**** TODO Add auto login  for my user
**** TODO Disable gdm
**** TODO [[info:guix#X Window][enable startx]]
** Manifests
*** Inbox
** General
* Channels

to lock the channels at the current commit run:
#+begin_src shell :tangle no
  guix describe --format=channels
#+end_src

#+begin_src scheme :tangle config/.config/guix/channels.scm
  ;; NOTE: channels.scm is generated from System.org. Please edit that file
  ;;        in Emacs and channels.scm will be generated automatially
  
  (list (channel
         (name 'flat)
         (url "https://github.com/flatwhatson/guix-channel.git")
         (introduction
          (make-channel-introduction
           "33f86a4b48205c0dc19d7c036c85393f0766f806"
           (openpgp-fingerprint
            "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
        (channel
         (name 'nonguix)
         (url "https://gitlab.com/nonguix/nonguix")
         (introduction
          (make-channel-introduction
           "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
           (openpgp-fingerprint
            "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
        (channel
         (name 'guix)
         (url "https://git.savannah.gnu.org/git/guix.git")
         (introduction
          (make-channel-introduction
           "9edb3f66fd807b096b48283debdcddccfea34bad"
           (openpgp-fingerprint
            "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))
#+end_src

* Modules

#+begin_src scheme
  ;; NOTE: system.scm is generated from System.org. Please edit that file
  ;;        in Emacs and system.scm will be generated automatially
  
  (use-modules (gnu)
               (gnu packages shells)
               (gnu services dbus)
               (gnu services pm)
               (nongnu packages linux))
  (use-service-modules
   cups
   desktop
   networking
   ssh
   xorg)
  #+end_src

* OS

#+begin_src scheme :noweb yes
  <<my-desktop-services>>
  
  (operating-system
   (kernel linux)
   (firmware (list linux-firmware))
   (locale "en_CA.utf8")
   (timezone "America/Edmonton")
   (keyboard-layout (keyboard-layout "us"))
   (host-name "Cortex")
   <<users>>
   <<packages>>
   <<services>>
   <<bootloader>>
   <<mapped-devices>>
   <<file-system>>
   <<swap-devices>>)
#+end_src

** Bootloader

#+NAME: bootloader
#+begin_src scheme :tangle no
  (bootloader
   (bootloader-configuration
    (bootloader grub-efi-bootloader)
    (target "/boot/efi")
    (timeout 3)
    (keyboard-layout keyboard-layout)))
#+end_src

** Mapped Devices

#+NAME: mapped-devices
#+begin_src scheme :tangle no
  (mapped-devices
   (list (mapped-device
          (source
           (uuid "6773b52e-1496-407e-b1d8-9a2ac7f7820f"))
          (target "system-root")
          (type luks-device-mapping))
         (mapped-device
          (source
           (uuid "08123a90-d66b-41ff-8f2c-4435292f7818"))
          (target "crypthome")
          (type luks-device-mapping))))
#+end_src

** File System

#+NAME: file-system
#+begin_src scheme :tangle no
  (file-systems
   (cons* (file-system
           (mount-point "/")
           (device "/dev/mapper/system-root")
           (type "ext4")
           (dependencies mapped-devices))
          (file-system
           (mount-point "/boot/efi")
           (device (uuid "4B6C-4B80" 'fat32))
           (type "vfat"))
          (file-system
           (mount-point "/home")
           (device "/dev/mapper/crypthome")
           (type "ext4")
           (dependencies mapped-devices))
  
          %base-file-systems))
#+end_src
#+NAME: swap-devices
#+begin_src scheme :tangle no
  (swap-devices
   (list "/tempSwap"))
#+end_src
#+end_src

** Users

#+NAME: users
#+begin_src scheme :tangle no
  (users (cons* (user-account
                 (name "jake")
                 (comment "Jake")
                 (group "users")
                 (shell (file-append zsh "/bin/zsh"))
                 (home-directory "/home/jake")
                 (supplementary-groups
                  '("wheel" "netdev" "audio" "video")))
                %base-user-accounts))
                  #+end_src

** Packages

#+NAME: packages
#+begin_src scheme :tangle no
  (packages
   (append
    (list (specification->package "emacs")
          (specification->package "emacs-exwm")
          (specification->package "git")
          (specification->package "stow")
          (specification->package "neovim")
          (specification->package "gcc")
          (specification->package "gnupg")
          (specification->package "xauth")
          (specification->package "zsh")
          (specification->package
           "emacs-desktop-environment")
          (specification->package "nss-certs"))
    %base-packages))
#+end_src

** Services

#+NAME: services
#+begin_src scheme :tangle no
  (services
   (append
    (list (service xfce-desktop-service-type)
          (service cups-service-type)
          (service openssh-service-type)
          (service tlp-service-type
                   (tlp-configuration
                    (cpu-scaling-governor-on-ac (list "performance"))
                    (sched-powersave-on-bat? #t)))
          (set-xorg-configuration
           (xorg-configuration
            (keyboard-layout keyboard-layout)))
          (extra-special-file "/usr/bin/env"
                              (file-append coreutils "/bin/env")))
    %my-desktop-services))
#+end_src

** Desktop Configuration

#+NAME: my-desktop-services
#+begin_src scheme :tangle no
  (define %backlight-udev-rule
    (udev-rule
     "90-backlight.rules"
     (string-append "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                    "RUN+=\"/run/current-system/profile/bin/chgrp video /sys/class/backlight/%k/brightness\""
                    "\n"
                    "ACTION==\"add\", SUBSYSTEM==\"backlight\", ""RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/backlight/%k/brightness\"")))

  (define %my-desktop-services
    ;; My personal Desktop configuration
    (modify-services %desktop-services
                     (elogind-service-type config =>
                                           (elogind-configuration
                                            (inherit config)
                                            (handle-lid-switch 'suspend)))
                     ;; (guix-service-type config =>
                     (udev-service-type config =>
                                        (udev-configuration (inherit config)
                                                            (rules (cons %backlight-udev-rule
                                                                         (udev-configuration-rules config)))))
                     ;;(inherit config)
                     ;;do some stuff
                     ));;))
#+end_src
* Manifests

config/.config/guix/manifests/default.scm
#+begin_src scheme :noweb yes :tangle ./config/.config/guix/manifests/default.scm
  ;; NOTE: user.scm is generated from System.org. Please edit that file
  ;;        in Emacs and user.scm will be generated automatially
  
  (specifications->manifest
   (list "glibc-locales"
         <<default>>))
   #+end_src

config/.config/guix/manifests/desktop.scm
#+begin_src scheme :noweb yes :tangle config/.config/guix/manifests/desktop.scm
  (specifications->manifest
   (list "polybar"
         <<desktop>>))
#+end_src

config/.config/guix/manifests/apps.scm
#+begin_src scheme :noweb yes :tangle config/.config/guix/manifests/apps.scm
  (specifications->manifest
   (list "alacritty"
         <<applications>>))
#+end_src


config/.config/guix/manifests/browsers.scm
#+begin_src scheme :tangle config/.config/guix/manifests/browsers.scm
  (specifications->manifest
   (list "qutebrowser"
         "firefox"))
#+end_src
** Default

#+NAME: default
#+begin_src scheme :tangle no
  "font-abattis-cantarell"
  "font-fira-code"
  "xrandr"
  "zsh"
  "xmodmap"
  "pinentry"
  "htop"
  "fontconfig"
  "neovim"
#+end_src

** Desktop

#+NAME: desktop
#+begin_src scheme :tangle no
  "dunst"
  "brightnessctl"
  "picom"
  "xclip"
  "xwallpaper"
  "sxiv"
#+end_src

** Applications

#+NAME: applications
#+begin_src scheme :tangle no
  "lf"
  "neofetch"
  "mpv"
  "mpd"
#+end_src

* Profiles
:PROPERTIES:
:header-args: :tangle config/.config/guix/active-profiles
:END:
#+begin_src sh
  # NOTE: active-profiles is generated from System.org. Please edit that 
  #   file in Emacs and active-profiles will be generated automatially
  
  export GUIX_PROFILE="$HOME/.config/guix/current"
  . "$GUIX_PROFILE/etc/profile"
  export GUIX_PROFILE="$HOME/.guix-profile"
  . "$GUIX_PROFILE/etc/profile"
  export GUIX_LOCPATH="$GUIX_PROFILE/lib/locale"
  export GUIX_EXTRA_PROFILES="$HOME/.guix-extra-profiles"
  
  export XDG_DATA_DIR="$HOME/.guix-profile/share"
  export XDG_DATA_DIR="$XDG_DATA_DIR:$GUIX_EXTRA_PROFILES/emacs/emacs/share"
  export XDG_DATA_DIR="$XDG_DATA_DIR:$GUIX_EXTRA_PROFILES/desktop/desktop/share"
  export XDG_DATA_DIR="$XDG_DATA_DIR:$GUIX_EXTRA_PROFILES/apps/apps/share"
  GUIX_PROFILE="$HOME/$GUIX_EXTRA_PROFILES/apps/apps"; \
   . "$GUIX_PROFILE/etc/profile"
  GUIX_PROFILE="$HOME/$GUIX_EXTRA_PROFILES/browser/browser"; \
   . "$GUIX_PROFILE/etc/profile"
  GUIX_PROFILE="$GUIX_EXTRA_PROFILES/desktop/desktop"; \
  . "$GUIX_PROFILE/etc/profile"
  GUIX_PROFILE="$GUIX_EXTRA_PROFILES/emacs/emacs"; \
  . "$GUIX_PROFILE/etc/profile"
  
#+end_src
Set up XDG variables
#+begin_src sh :tangle config/.config/user-dirs.dirs
  XDG_PICTURES_DIR=$HOME/Pictures
#+end_src
