#+TITLE: GNU Guix System Configuration
#+AUTHOR: Jacob Stannix
#+PROPERTY: header-args :tangle config/.config/guix/system.scm
My GNU/Guix System Configuration. In this file you will find channels.scm, all my active manifests, any environment variables that need to be configured, and general misilanious/sp? files required for the healthy operation of my Guix system.
* Inbox
** OS
*** Users
**** TODO Add auto login  for my user
**** TODO Disable gdm
**** TODO [[info:guix#X Window][enable startx]]
*** TODO User auto login
auto login to gdm by redefinging the service
*** TODO GPS Local for redshift
** Manifests
*** Inbox
** General
* Channels

to lock the channels at the current commit run:
#+begin_src shell :tangle no
  guix describe --format=channels
#+end_src
:HEADER:
#+NAME: channels-header
#+begin_src emacs-lisp :tangle no
  (my/--generate-file-header "System.org" "channels.scm")
#+end_src
#+begin_src scheme :tangle config/.config/guix/channels.scm :noweb yes
  <<channels-header()>>
#+end_src
:END:

#+begin_src scheme :tangle config/.config/guix/channels.scm

  (list (channel
         (name 'guix)
         (url "https://git.savannah.gnu.org/git/guix.git")
         (introduction
          (make-channel-introduction
           "9edb3f66fd807b096b48283debdcddccfea34bad"
           (openpgp-fingerprint
            "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
        (channel
         (name 'nonguix)
         (url "https://gitlab.com/nonguix/nonguix")
         (introduction
          (make-channel-introduction
           "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
           (openpgp-fingerprint
            "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
        (channel
         (name 'flat)
         (url "https://github.com/flatwhatson/guix-channel.git")
         (introduction
          (make-channel-introduction
           "33f86a4b48205c0dc19d7c036c85393f0766f806"
           (openpgp-fingerprint
            "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490")))))
#+end_src

* Modules
:HEADER:
#+NAME: system-header
#+begin_src emacs-lisp :tangle no
  (my/--generate-file-header "System.org" "system.scm")
#+end_src
#+begin_src scheme :noweb yes
  <<system-header()>>
#+end_src
:END:
#+begin_src scheme :noweb yes
  (use-modules (gnu)
               (gnu packages shells)
               (gnu services dbus)
               (gnu services pm)
               (nongnu packages linux))
  (use-service-modules
   cups
   desktop
   networking
   ssh
   xorg)
#+end_src

* OS

#+begin_src scheme :noweb yes
  <<my-desktop-services>>
  
  (operating-system
   (kernel linux)
   (firmware (list linux-firmware))
   (locale "en_CA.utf8")
   (timezone "America/Edmonton")
   (keyboard-layout (keyboard-layout "us"))
   (host-name "Cortex")
   <<users>>
   <<packages>>
   <<services>>
   <<bootloader>>
   <<mapped-devices>>
   <<file-system>>
   <<swap-devices>>)
#+end_src

** Bootloader

#+NAME: bootloader
#+begin_src scheme :tangle no
  (bootloader
   (bootloader-configuration
    (bootloader grub-efi-bootloader)
    (target "/boot/efi")
    (timeout 3)
    (keyboard-layout keyboard-layout)))
#+end_src

** Mapped Devices

#+NAME: mapped-devices
#+begin_src scheme :tangle no
  (mapped-devices
   (list (mapped-device
          (source
           (uuid "6773b52e-1496-407e-b1d8-9a2ac7f7820f"))
          (target "system-root")
          (type luks-device-mapping))
         (mapped-device
          (source
           (uuid "08123a90-d66b-41ff-8f2c-4435292f7818"))
          (target "crypthome")
          (type luks-device-mapping))))
#+end_src

** File System

#+NAME: file-system
#+begin_src scheme :tangle no
  (file-systems
   (cons* (file-system
           (mount-point "/")
           (device "/dev/mapper/system-root")
           (type "ext4")
           (dependencies mapped-devices))
          (file-system
           (mount-point "/boot/efi")
           (device (uuid "4B6C-4B80" 'fat32))
           (type "vfat"))
          (file-system
           (mount-point "/home")
           (device "/dev/mapper/crypthome")
           (type "ext4")
           (dependencies mapped-devices))
  
          %base-file-systems))
#+end_src
#+NAME: swap-devices
#+begin_src scheme :tangle no
  (swap-devices
   (list "/tempSwap"))
#+end_src
#+end_src

** Users

#+NAME: users
#+begin_src scheme :tangle no
  (users (cons* (user-account
                 (name "jake")
                 (comment "Jake")
                 (group "users")
                 (shell (file-append zsh "/bin/zsh"))
                 (home-directory "/home/jake")
                 (supplementary-groups
                  '("wheel" "netdev" "audio" "video")))
                %base-user-accounts))
#+end_src

** Packages

#+NAME: packages
#+begin_src scheme :tangle no
  (packages
   (append
    (list (specification->package "emacs")
          (specification->package "emacs-exwm")
          (specification->package "git")
          (specification->package "stow")
          (specification->package "wesnoth")
          (specification->package "neovim")
          (specification->package "gcc-toolchain")
          (specification->package "gnupg")
          (specification->package "xauth")
          (specification->package "zsh")
          (specification->package
           "emacs-desktop-environment")
          (specification->package "nss-certs"))
    %base-packages))
  #+end_src

** Services

#+NAME: services
#+begin_src scheme :tangle no
  (services
   (append
    (list (service xfce-desktop-service-type)
          (service cups-service-type)
          (service openssh-service-type)
          (service tlp-service-type
                   (tlp-configuration
                    (cpu-scaling-governor-on-ac (list "performance"))
                    (sched-powersave-on-bat? #t)))
          (set-xorg-configuration
           (xorg-configuration
            (keyboard-layout keyboard-layout)))
          (extra-special-file "/usr/bin/env"
                              (file-append coreutils "/bin/env")))
    %my-desktop-services))
#+end_src

** Desktop Configuration

#+NAME: my-desktop-services
#+begin_src scheme :tangle no
  (define %backlight-udev-rule
    (udev-rule
     "90-backlight.rules"
     (string-append "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                    "RUN+=\"/run/current-system/profile/bin/chgrp video /sys/class/backlight/%k/brightness\""
                    "\n"
                    "ACTION==\"add\", SUBSYSTEM==\"backlight\", ""RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/backlight/%k/brightness\"")))
  
  (define %my-desktop-services
    ;; My personal Desktop configuration
    (modify-services %desktop-services
                     (elogind-service-type config =>
                                           (elogind-configuration
                                            (inherit config)
                                            (handle-lid-switch 'suspend)))
                     ;; (guix-service-type config =>
                     (udev-service-type config =>
                                        (udev-configuration (inherit config)
                                                            (rules (cons %backlight-udev-rule
                                                                         (udev-configuration-rules config)))))
                     ;;(inherit config)
                     ;;do some stuff
                     ));;))
#+end_src
* Manifests

:HEADER:
#+NAME: default-header
#+begin_src emacs-lisp :tangle no
  (my/--generate-file-header "System.org" "default.scm") 
#+end_src
#+begin_src scheme :noweb yes :tangle config/.config/guix/manifests/default.scm
  <<default-header()>>
#+end_src
:END:
  
config/.config/guix/manifests/default.scm
#+begin_src scheme :noweb yes :tangle config/.config/guix/manifests/default.scm
  (specifications->manifest
   (list "glibc-locales"
         <<default>>))
#+end_src

:HEADER:
#+NAME: apps-header
#+begin_src emacs-lisp :tangle no
  (my/--generate-file-header "System.org" "default.scm") 
#+end_src
#+begin_src scheme :noweb yes :tangle config/.config/guix/manifests/apps.scm
  <<apps-header()>>
#+end_src
:END:

config/.config/guix/manifests/apps.scm
#+begin_src scheme :noweb yes :tangle config/.config/guix/manifests/apps.scm
  
  (specifications->manifest
   (list "alacritty"
         <<applications>>))
#+end_src

** Default

#+NAME: default
#+begin_src scheme :tangle no
  "font-abattis-cantarell"
  "font-fira-code"
  "xrandr"
  "zsh"
  "xmodmap"
  "ispell"
  "password-store"
  "pinentry"
  "htop"
  "fontconfig"
  "neovim"
#+end_src

** Applications

#+NAME: applications
#+begin_src scheme :tangle no
  "neofetch"
  "mpv"
  "mpd"
#+end_src

* Profiles
:PROPERTIES:
:header-args: :tangle config/.config/guix/active-profiles
:END:
:HEADER:
#+NAME: active-profiles-header
#+begin_src emacs-lisp :tangle no
  (my/--generate-file-header "System.org" "active-profiles" "#")
#+end_src
#+begin_src sh :noweb yes
  <<active-profiles-header()>>
#+end_src
:END:

#+begin_src sh 
  export GUIX_PROFILE="$HOME/.config/guix/current"
  . "$GUIX_PROFILE/etc/profile"
  export GUIX_PROFILE="$HOME/.guix-profile"
  . "$GUIX_PROFILE/etc/profile"
  export GUIX_LOCPATH="$GUIX_PROFILE/lib/locale"

  export XDG_DATA_DIR="$HOME/.guix-profile/share"
  export XDG_DATA_DIR="$XDG_DATA_DIR:/var/lib/flatpak/exports/share/applications"
#+end_src

Set up XDG variables
#+begin_src sh :tangle config/.config/user-dirs.dirs 
  XDG_PICTURES_DIR=$HOME/Pictures
#+end_src

** Profile Managment
GREEN='\033[1;32m'
RED='\033[1;30m'
NC='\033[0m'
GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles

function guix-install-profile () {
local profiles=$*
if [[ $# -eq 0 ]]; then
    echo "function requires paramaters" # profiles="$GUIX_EXTRA_PROFILES/*";
    return 1
fi

for profile in $profiles; do
    local profileName=$(basename $profile)
    local profilePath=$GUIX_EXTRA_PROFILES/$profileName

    echo
    echo -e "${GREEN}installing profile:" $profilePath "${NC}"
    echo

    guix package --profile="$profilePath/$profileName" --manifest="$HOME/.config/guix/manifests/$profileName.scm"
done 
  }

  function guix-populate-profiles () {
  local profiles=$*
  if [[ $# -eq 0 ]]; then
      local profiles="$HOME/.config/guix/manifests/*.scm"
  fi

  for profile in $profiles; do
      # Remove the path and file extension, if any
      local profileName=$(basename $profile)
      local profileName="${profileName%.*}"
      local profilePath="$GUIX_EXTRA_PROFILES/$profileName"
      local manifestPath=$HOME/.config/guix/manifests/$profileName.scm

      if [ -f $manifestPath ]; then
          echo
          echo -e "${GREEN}Activating profile:" $manifestPath "${NC}"
          echo

          mkdir -p $profilePath
          guix package --manifest=$manifestPath --profile="$profilePath/$profileName"
      fi
  done
  }

  function guix-activate-profiles () {
  local profiles=$*
  if [[ $# -eq 0 ]]; then
      local profiles="$GUIX_EXTRA_PROFILES/*"
  fi

  for profile in $profiles; do
      # Remove the path and file extension, if any
      local profileName=$(basename $profile)
      local profilePath="$GUIX_EXTRA_PROFILES/$profileName"

      # Source the new profile
      GUIX_PROFILE="$profilePath/$profileName"
      if [ -f $GUIX_PROFILE/etc/profile ]; then
          . "$GUIX_PROFILE"/etc/profile
      else
          echo -e "${RED}Couldn't find profile:" $GUIX_PROFILE/etc/profile "${NC}"
      fi
      else
          echo "No profile found at path" $profilePath
  done
  }

  function guix-activate-xdg-data () {
  local profiles=$*
  if [[ $# -eq 0 ]]; then
      local profiles="$GUIX_EXTRA_PROFILES/*"
  fi

  for profile in $profiles; do
      # Remove the path, if any
      local profileName=$(basename $profile)
      local profilePath="$GUIX_EXTRA_PROFILES/$ProfileName"

      # Export the XDG_DATA_DIR
      $GUIX_PROFILE="$profilePath/$profileName"
      if [[ -d $GUIX_PROFILE/share ]]; then
          export XDG_DATA_DIR="$XDG_DATA_DIR:$GUIX_PROFILE/share"
      else
          echo -e "${RED}Couldn't fine share directory:" $GUIX_PROFILE/share "${NC}"
      fi
  done
  }


