#+TITLE: Guix User System Configuration
#+AUTHOR: Jacob Stannix

* Channels
** TODO nonguix
:PROPERTIES:
:header-args: :tangle config/.config/guix/channels.   (url "https://gitlab.com/nonguix/nonguix")
        ;; Enable signature verification:
        (introduction
         (make-channel-introduction
          "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
          (openpgp-fingerprint
           "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
       %default-channels)
#+end_src
* Manifests
** Desktop
:PROPERTIES:
:header-args: :tangle ./config/.config/guix/profiles/desktop.scm
:END:
#+begin_src scheme
  (specifications->manifest
    (list "dunst"
          "picom"
          "xclip"
          "xwallpaper"
          "sxiv"))
#+end_src
** Applications
:PROPERTIES:
:header-args: :tangle config/.config/guix/profiles/applications.scm
:END:
#+begin_src scheme
  (specifications->manifest
   (list "alacritty" ;; FIXME: requires configuration for guix specific font name
         "font-fira-code"
         "qutebrowser"
         "password-store"))
#+end_src
* Profiles
:PROPERTIES:
:header-args: :tangle config/.config/guix/active-profiles
:END:
** Guix Profile

#+begin_src sh
export GUIX_PROFILE="$HOME/.config/guix/current"
. "$GUIX_PROFILE/etc/profile"
export GUIX_PROFILE="$HOME/.guix-profile"
. "$GUIX_PROFILE/etc/profile"
export GUIX_LOCPATH="$GUIX_PROFILE/lib/locale"
#+end_src
** Active Profiles
#+begin_src sh 
export GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles
for i in $GUIX_EXTRA_PROFILES/*; do
  profile=$i/$(basename "$i")
  if [ -f "$profile"/etc/profile ]; then
    GUIX_PROFILE="$profile"
    . "$GUIX_PROFILE"/etc/profile
  fi
  unset profile
done
#+end_src

