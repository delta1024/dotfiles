#+TITLE: Jake's Emacs Config
#+AUTHOR: Jacob Stannix
#+PROPERTY: header-args :tangle ./config/.config/emacs/init.el 
* Inbox
** TODO setup =org-mode= structure templates
** DONE bind =org-open-file= to keyboard
** TODO set =consel-linux-app= custom variable.

* Preamble
The following is my emacs config, feel free to take as much or as little as you like.

For a very comprehensive configuratoin guide please check out the [[https://www.youtube.com/watch?v=74zOY-vgkyw&list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs From Scratch playlist]] on the [[https://www.youtube.com/c/SystemCrafters][System Crafters Youtube Channel]] or check out the [[https://github.com/daviwil/emacs-from-scratch][github]] repo. 

#+begin_src emacs-lisp
  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!
#+end_src

* Startup Optimization
#+begin_src emacs-lisp 
  (defvar emacs-startup-time 
    (format "%.2f seconds"
            (float-time
             (time-subtract after-init-time before-init-time))) "Emacs start up time")
  (defvar emacs-startup-gc
    gcs-done "Number of garbage collections done at statup")
  (defun my/display-startup-time ()
    (message "Emacs loaded in %s."
             emacs-startup-time
             ))

  (add-hook 'emacs-startup-hook #'my/display-startup-time)
#+end_src

Gives a memeory boost at startup
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Debugging
:PROPERTIES:
:header-args: :tangle no
:END:
#+begin_src emacs-lisp
(setq use-package-verbose t)
#+end_src

* Variables
#+begin_src emacs-lisp
  (defvar my/org-font "Cantarell" "org-mode's variable pitched font name")
  (defvar my/user-font "Fira Code" "emacs's fixed width font")
  (defvar my/font-size 150 "font size for emacs")
  (defvar my/emacs-file (concat (getenv "HOME") "/.dotfiles/Emacs.org") "emacs configuration file name")
  (defvar my/alpha-value '(90 . 90) "EXWM default alpha value")
#+end_src

* Initial Buffer
:PROPERTIES:
:header-args: :tangle no
:END:

#+begin_src emacs-lisp 
  (setq initial-buffer-choice (lambda () (switch-to-buffer "*Messages*")))
#+end_src

* Basic UI Improvements


#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  
  ;; Redirect custom output
  (setq custom-file (concat user-emacs-directory "emacs-custom.el"))
  
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  
  (menu-bar-mode -1)            ; Disable the menu bar
  
  ;; sets fixed-width font
  (set-face-attribute 'default nil :font my/user-font :height my/font-size)
  
  
  ;; Disables the visual bell
  (setq visible-bell t)
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook
                  dired-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme :noweb-ref packages 
        "font-abattis-cantarell"
        "font-fira-code"
#+end_src

* Package and Use-Package
=use-package= setup. 

#+Begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-use-package"
#+end_src

* Keyboard
** Evil

#+begin_src emacs-lisp
  (use-package evil
    :ensure nil
    :demand t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    :config
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-visual-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-replace-state-map (kbd "C-g") 'evil-normal-state)
    (evil-mode)
    :bind
    ([remap evil-search-forward] . swiper)
    ([remap evil-search-backward] . swiper-backward))
#+end_src

**** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-evil"
#+end_src

*** Evil Collection

#+begin_src emacs-lisp
  (use-package evil-collection
    :ensure nil
    :after evil
    :config
    (evil-collection-init)) 
#+end_src

**** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-evil-collection"
#+end_src

*** Which-Key

#+begin_src emacs-lisp
  (use-package which-key
    :ensure nil
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+end_src

**** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-which-key"
#+end_src

*** Hydra
:PROPERTIES:
:header-args: :tangle no
:END:
#+begin_src emacs-lisp
(use-package hydra)
#+end_src

** General

#+begin_src emacs-lisp
  (use-package general
    :ensure nil
    :after evil
    :config
    (general-evil-setup t))
  
  (general-create-definer my/leader-def
    :keymaps '(normal insert visual emacs)
    :prefix "C-SPC"
    :global-prefix "C-SPC"
    :prefix-command 'my-leader-command
    :prefix-map 'my-leader-map)
  
  (my/leader-def
    "f"     '(nil :which-key "file system")
    "f f"   '(counsel-find-file :which-key "save-file")
    "f s"   '(save-buffer :which-key "save file")
    "f r"   '((lambda () (interactive) (counsel-find-file "/sudo::")) :which-key "open file as root")
    "h"     '(nil :which-key "config options")
    "h f"   '((lambda () (interactive)
                (find-file my/emacs-file)) :which-key "open emacs configuration")
    "h M-f" '((lambda () (interactive)
                (find-file (concat (getenv "HOME") "/.emacs-old/README.org"))) :wk "open old config file")
    "a"     '(eshell :which-key "eshell")
    ";"     '(counsel-M-x :which-key "M-x")
    "w f"   '(delete-frame :wk "delete fram")
    "b"     '(counsel-switch-buffer :wk "switch buffers with preview")
    "M-b"   '(ivy-switch-buffer :wk "switch buffer")
    "o"     '(my/org-open-file :wk "open org file"))
#+end_src

*** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-general"
#+end_src

** Swiper
#+begin_src emacs-lisp
  (require 'swiper)
#+end_src

*** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-swiper"
#+end_src

* TODO Org Mode
** org-open-file

  #+begin_src emacs-lisp
    (setq org-directory "~/Documents/org/")
    (defun my/org-open-file (a) "Opens the file in `org-directory'"
           (interactive "sOrg File Name: ")
           (find-file (concat org-directory a ".org")))
  #+end_src

** Use Package

#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :no-require t
#+end_src

**** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-org"
#+end_src
*** Keybindings

#+begin_src emacs-lisp
  :bind ("C-c o" . counsel-outline)
#+end_src

*** Hooks

  #+begin_src emacs-lisp
    :hook (org-mode . my/org-mode-setup)
    (org-mode . (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config)))
  #+end_src

*** Config

  #+begin_src emacs-lisp
    :config
#+end_src

**** Functions
***** org-font-setup

#+begin_src emacs-lisp
  (defun my/org-font-setup ()
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font my/org-font :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

***** org-mode-setup

#+begin_src emacs-lisp
  (defun my/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))
    (setq org-ellipsis " ▾")
    (setq org-hide-emphasis-markers t)
    (setq org-confirm-babel-evaluate nil)
    (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)))
#+end_src

**** Auto Tangle Config

#+begin_src emacs-lisp
  (defun my/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                   (concat (getenv "HOME") "/.dotfiles/Emacs.org"))
  ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
    (org-babel-tangle))))
#+end_src

*** DELIM

#+begin_src emacs-lisp
  (my/org-font-setup))
  #+end_src
  
** TODO Packages  
**** Org Bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :ensure nil
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
***** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-org-bullets"
#+end_src
**** Visual Fill Colum

#+begin_src emacs-lisp
  (use-package visual-fill-column
    :ensure nil
    :after org
    :config
    (defun my/org-mode-visual-fill () 
      (setq visual-fill-column-width 115
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))
    :hook (org-mode . my/org-mode-visual-fill))
#+end_src
***** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-visual-fill-column"
#+end_src

**** TODO Org Roam
For details checkout [[https://www.youtube.com/watch?v=AyhPmypHDEw][System Crafters video]] as well as the project [[https://github.com/org-roam/org-roam][github]] and [[https://www.orgroam.com/][website]].
** TODO Productivity
[[https://www.youtube.com/watch?v=PNE-mgkZ6HM][System Crafters Video]]
 * Wrap any code to eval in a =with-eval-after-load= block.
*** Todo Keywords
#+begin_src emacs-lisp
  (setq org-todo-keywords
    '((sequence "TODO(t)" "STARTEd(s)" "|" "DONE(d!)")
      (sequence "HOLD(h)" "|" "COMPLETED(c)" "DROED(d@)")))
#+end_src

* Dired

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :after evil
    :demand t)
#+end_src

* Productivity
** Ivy 

#+begin_src emacs-lisp
  (use-package ivy
    :ensure nil
    :diminish
    :bind (:map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config)
  
#+end_src
*** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-ivy"
#+end_src

** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :ensure nil
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-switch-buffer-other-window))
    :custom
     ((counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)))
  
#+end_src

*** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-counsel"
#+end_src
** Ivy Rich
#+begin_src emacs-lisp
  
  (use-package ivy-rich
    :ensure nil
    :after ivy)
  
#+end_src
*** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-ivy-rich"
#+end_src

** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map))
  ;; NOTE: Set this to the folder where you keep your Git repos!
#+end_src

**** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-projectile"
#+end_src
*** Counsel-Projectile
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :ensure nil
    :after projectile
    :config (counsel-projectile-mode))
#+end_src

**** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-counsel-projectile"
#+end_src

** Magit

#+begin_src emacs-lisp
  (use-package magit
    :ensure nil
    :config (evil-collection-magit-setup)
    :general
    (:prefix-map 'my-leader-map
     "g" '(magit :which-key "Status")))
#+end_src

**** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
 "emacs-magit"
#+end_src

*** TODO Forge
 NOTE: Make sure to configure a GitHub token before using this package!
 - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
 - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started

 #+begin_src emacs-lisp :tangle no
 (use-package forge)
 #+end_src

* TODO Development
** TODO LSP Mode
[[https://github.com/emacs-lsp/lsp-mode][github]]
** TODO Rustic Mode
[[https://github.com/brotzeit/rustic][github]]
* Misc 
** Helpful

#+begin_src emacs-lisp
  (use-package helpful
    :ensure nil
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src
*** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-helpful"
#+end_src

** Doom
*** Doom Themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure nil
    :init
    (load-theme 'doom-one t))
#+end_src
**** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-doom-themes"
#+end_src

*** Doom Modeline 

NOTE: The first time you load your configuration on a new machine, you'll
need to run the following command interactively so that mode line icons
display correctly:

=M-x all-the-icons-install-fonts=

#+begin_src emacs-lisp
    (use-package all-the-icons
      :ensure nil)
  
    (use-package doom-modeline
      :ensure nil
      :init (doom-modeline-mode t)
      :custom ((doom-mode-line-height 13)))
#+end_src

**** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-all-the-icons"
  "emacs-doom-modeline"
#+end_src

** Rainbow Delimiters

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ensure nil
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Guix
:PROPERTIES:
:header-args: :noweb-ref packages
:END:
#+begin_src scheme
  "emacs-rainbow-delimiters"
#+end_src

* EXWM
Load in exwm
#+begin_src emacs-lisp
  (defun my/exwm-load (switch)
    (load-file (concat user-emacs-directory "desktop.el")))

  (add-to-list 'command-switch-alist '("-exwm" . my/exwm-load))
#+end_src

* Runtime Optimization

Returns the garbage collector to a sane value.
#+begin_src emacs-lisp
  (defun my/post-config () "Sets the `gc-cons-threshold' to a sane value and loads the custom file"
         (setq gc-cons-threshold (* 2 1000 1000))
         ;; We're going to load custom here becaus it makes more
         ;; sense to do so here with how EXWM is loaded
         (load custom-file :noerror))

  ;; Returns nil if switch is abset
  (defun found-custom-arg (switch) "Returns nil if switch is absent"
         (let ((found-switch (member switch command-line-args)))
           found-switch))

  ;; if exwm isn't running set custom variables
  (unless (found-custom-arg "-exwm")
    (my/post-config))
#+end_src

* Manifest
:PROPERTIES:
:header-args: :noweb yes :tangle ./config/.config/guix/profiles/emacs.scm
:END:
#+begin_src scheme 
  (specifications->manifest
    (list "emacs"
          "emacs-guix"
          "emacs-exwm"
           <<packages>>
      ))
#+end_src

