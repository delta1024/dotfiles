#+TITLE: Jake's Emacs Config
#+AUTHOR: Jacob Stannix
#+PROPERTY: header-args :tangle config/.config/emacs/init.el
#+PROPERTY: MANIFEST config/.config/guix/manifests/emacs.scm

check out the [[https://www.youtube.com/watch?v=74zOY-vgkyw&list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs From Scratch playlist]] on the [[https://www.youtube.com/c/SystemCrafters][System Crafters Youtube Channel]] or check out the [[https://github.com/daviwil/emacs-from-scratch][github]] repo. 
* Inbox
:PROPERTIES:
:VISIBILITY: children
:END:
** General
*** Eshell
Paruse Documentation for useful configuration stuff
*** Transiant keymap for config files
*** Keybinding for Shells.org
*** Dotcrafter
find a way to remove duplicate .gitignore entries
** Magit
*** MAYBE Forge
- [ ] Create token for github auth
- [ ] install and configure forge
  NOTE: Make sure to configure a GitHub token before using this package!
- https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
- https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started

  #+begin_src emacs-lisp :tangle no
    (use-package forge)
  #+end_src

** Development
*** MAYBE LSP Mode
[[https://github.com/emacs-lsp/lsp-mode][github]]
*** MAYBE DAP Mode
*** MAYBE Rustic Mode
[[https://github.com/brotzeit/rustic][github]]
** Org
*** MAYBE [[https://github.com/org-roam/org-roam-ui][org-roam-ui]]
Description: Graphical front end for org roam 
* Preamble

#+begin_src emacs-lisp
  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!
#+end_src

* Early Init
:PROPERTIES:
:header-args: :tangle config/.config/emacs/early-init.el
:END:
This section tangles out to =early-init.el=
:HEADER:
#+NAME: early-init-header
#+begin_src emacs-lisp :tangle no
  (user-config-generate-file-header "Emacs.org" "early-init.el")
#+end_src

#+begin_src emacs-lisp :tangle config/.config/emacs/early-init.el :noweb yes
  <<early-init-header()>>
#+end_src
:END:
#+begin_src emacs-lisp 
  (setq package-enable-at-startup nil)
  (tool-bar-mode -1)          ; Disable the toolbar
  (load-theme 'deeper-blue)
  
  (add-to-list 'load-path (expand-file-name "user-config" user-emacs-directory))
  (require 'user-config)
  (user-config-mode 1)
  
#+end_src

* Init.el
** Native Comp
#+begin_src emacs-lisp
  (customize-set-variable 'native-comp-async-report-warnings-errors nil)
#+end_src
** Startup Optimization
From now on unless otherwise stated all soruce blocks tangle out to =init.el=
#+begin_src emacs-lisp 
  (defvar emacs-startup-time 
    (format "%.2f seconds"
            (float-time
             (time-subtract after-init-time before-init-time))) "Emacs start up time")
  (defvar emacs-startup-gc
    gcs-done "Number of garbage collections done at statup")
  (defun my/display-startup-time ()
    (message "Emacs loaded in %s."
             emacs-startup-time
             ))
  
  (add-hook 'emacs-startup-hook #'my/display-startup-time)
#+end_src

Gives a memeory boost at startup
#+begin_src emacs-lisp
  (setq gc-cons-threshold (* 50 1000 1000))
  (defvar my/post-config nil "Weither or not my/post-config has run")
  #+end_src

*** Debugging
:PROPERTIES:
:header-args: :tangle no
:END:
!!NOT ACTIVE!!
#+begin_src emacs-lisp
  (setq use-package-verbose t)
#+end_src

** Straight and Use-Package
:GUIX: 
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-use-package"
#+end_src
:END:
=Straight= and =use-package= setup. 

#+Begin_src emacs-lisp
  ;;(require 'package)
  
  ;;(setq package-archives '(("melpa" . "https://melpa.org/packages/")
  ;;("elpa" . "https://elpa.gnu.org/packages/")))
  
  (add-to-list 'load-path "~/.config/emacs/my-packages")
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  
  (require 'use-package) 
#+end_src

** Basic UI Improvements

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  
  ;; Redirect custom output
  
  (setq custom-file (expand-file-name "emacs-custom.el" user-emacs-directory))
  
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  
  (menu-bar-mode -1)          ; Disable the menu bar
  
  (setq emacs-theme '(doom-one doom-henna))
  (config-emacs-mode 1) 
  ;; sets fixed-width font
  (set-face-attribute 'default nil :font my/user-font :height my/font-size :weight 'regular)
  
  
  ;; Disables the visual bell
  (setq visible-bell t)
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  markdown-mode
                  eshell-mode-hook
                  dired-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** No Littering

:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-no-littering"
#+end_src
:END:

#+begin_src emacs-lisp
  (use-package no-littering
    :config
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))
#+end_src

* User Config
:PROPERTIES:
:header-args: :tangle config/.config/emacs/user-config/user-config-emacs.el :mkdirp t
:END:
untill otherwise stated the rest of the code blocks tangle out to =config/.config/emacs/user-config/user-config-emacs.el= unless stated otherwise.
:HEADER:
#+NAME: user-config-emacs-header
#+begin_src emacs-lisp
  (user-config-generate-file-header "Emacs.org" "user-config-emacs.el")
#+end_src

#+begin_src emacs-lisp :noweb yes
  <<user-config-emacs-header()>>
#+end_src
:END:
** Variables
#+begin_src emacs-lisp
  (defvar my/org-font "Cantarell" "org-mode's variable pitched font name")
  (defvar my/user-font "Fira Code" "emacs's fixed width font")
  (defvar my/font-size 150 "font size for emacs")
  (defvar my/emacs-file (expand-file-name  ".dotfiles/Emacs.org" (getenv "HOME")) "emacs configuration file name")
  (defvar my/guix-file (expand-file-name  ".dotfiles/System.org" (getenv "HOME")) "GNU Guix configuration file")
  (defvar my/alpha-value '(90 . 90) "EXWM default alpha value")
#+end_src

** Keyboard
*** Evil
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-evil"
  "emacs-evil-collection"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    :config
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-visual-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-replace-state-map (kbd "C-g") 'evil-normal-state)
    (evil-mode)
    :bind
    ([remap evil-search-forward] . swiper)
    ([remap evil-search-backward] . swiper-backward))
#+end_src

**** Evil Collection

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init)) 
#+end_src

**** Evil God State

#+begin_src emacs-lisp
  (use-package evil-god-state
    :straight '(evil-god-state
                :host github
                :repo "gridaphobe/evil-god-state")
    :config
    (evil-define-key 'normal global-map "," 'evil-execute-in-god-state)
    (evil-define-key 'god global-map [escape] 'evil-god-state-bail))
#+end_src

*** General
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-general"
#+end_src
:END:

#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-evil-setup t)
    (global-set-key (kbd "C-c k") 'my-leader-command))
  
  (general-create-definer my/leader-def
    :keymaps '(normal insert visual emacs)
    :prefix "C-SPC"
    :global-prefix "C-SPC"
    :prefix-command 'my-leader-command
    :prefix-map 'my-leader-map)
  
  
  (my/leader-def
    "f"     '(nil                                                     :wk "file system")
    "f f"   '(find-file                                               :wk "save-file")
    "f s"   '(save-buffer                                             :wk "save file")
    "f r"   '((lambda () (interactive) (find-file "/sudo::"))         :wk "open file as root")
  
    "h"     '(nil                                                     :wk "config options")
    "h e"   '((lambda () (interactive)
                (find-file (expand-file-name "Emacs.org" "~/.dotfiles")))
              :wk "emacs configuration")
    "h s" '((lambda () (interactive)
              (find-file my/guix-file))
            :wk "system configuration")
    "h d" '((lambda () (interactive)
              (find-file (expand-file-name "Desktop.org" "~/.dotfiles")))
            :wk "desktop configuration")
    "h z" '((lambda () (interactive)
              (find-file (expand-file-name "Environment.org" "~/.dotfiles")))
            :wk "environment configuration")
    "h r" '((lambda () (interactive)
              (find-file (expand-file-name "README.org" "~/.dotfiles")))
            :wk "README")
    "h w" '((lambda () (interactive)
              (find-file (expand-file-name "Workflow.org" "~/.dotfiles")))
            :wk "Org Configruation")
  
    "d"     '((lambda () (interactive) (dired "~/")) :wk "Dired home")
    "a"     '((lambda () (interactive) (start-process-shell-command "alacritty" nil "alacritty --working-directory ~/ -e nu"))
              :wk "nu ~")
    "A"     '((lambda () (interactive) (start-process-shell-command "alacritty" nil "alacritty -e nu"))
              :wk "nu")
    ";"     '(execute-extended-command                                :wk "M-x")
    "w f"   '(delete-frame                                            :wk "delete fram")
    "b"     '(consult-buffer                                          :wk "switch buffers with preview")
    ;;"M-b"   '(ivy-switch-buffer                                       :wk "switch buffer")
    "C-s"   '((lambda () (interactive) (guix))                        :wk "Guix")
    "o"     '(nil                                                     :wk "org")
    "o f"   '(my/org-open-file                                        :wk "open org file")
    "o a"   '(org-agenda                                              :wk "org agenda")
    "c"     '(org-capture                                             :wk "change directory"))
#+end_src

** Dired
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-all-the-icons-dired"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package dired
    :after evil
    :demand t
    :commands (dired dired-jump)
    :hook (dired-mode . dired-hide-details-mode)
    :bind (("C-x C-j" . dired-jump))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file)
    (setq dired-always-read-filesystem t)
    :custom ((dired-listing-switches "-AGgD --group-directories-first")
             (dired-kill-when-opening-new-dired-buffer t)))
#+end_src

*** Dired Single

#+begin_src emacs-lisp
  (use-package dired-single
    :straight t)
  
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer)
#+end_src

*** All the Icons Dired
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

*** Hide Dotfiles
#+begin_src emacs-lisp
  (use-package dired-hide-dotfiles
    :straight t
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))
#+end_src

*** Dired Open
#+begin_src emacs-lisp
  (use-package dired-open
    :straight t
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    ;; -- OR! --
    (setq dired-open-extensions '(("png" . "sxiv")
                                  ("mkv" . "mpv")
                                  ("webm" . "mpv"))))
#+end_src

** Org
#+begin_src emacs-lisp
  (require 'user-config-org)
#+end_src

** Development
**** LSP mode
:GUIX:
#+begin_src scheme :noweb-ref packages
  "emacs-lsp-mode"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-defered)
    :init
    (setq lsp-keymap-prefix "C-SPC m")
    :custom
    (lsp-rust-analyzer-store-path (concat (getenv "HOME") "/.nix-profile/bin/rust-analyzer"))
    :config
    (lsp-enable-which-key-integration t))
  
#+end_src

**** Rustic mode
:GUIX:
#+begin_src scheme :tangle no :noweb-ref packages
  "emacs-rustic"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package rustic
    :custom
    (rustic-analyzer-command '("rust-analyzer"))
    (rustic-rustfmt-bin (concat (getenv "HOME") "/.cargo/bin/rustfmt"))
    (rustic-cargo-bin (concat (getenv "HOME") "/.nix-profile/bin/cargo")))
#+end_src

In order for emacs to see the cargo binary we need to add =$HOME/.nix-profile/bin/= to our load path
#+begin_src emacs-lisp
  (customize-set-variable 'exec-path (add-to-list
                                      'exec-path
                                      (concat (getenv "HOME") "/.nix-profile/bin")))
#+end_src
** Misc
*** Visual Fill Colum
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-visual-fill-column"
#+end_src
:END:

#+begin_src emacs-lisp
  (use-package visual-fill-column
    :after org
    :config
    (defun my/org-mode-visual-fill () 
      (setq visual-fill-column-width 115
            visual-fill-column-center-text t)
      (visual-fill-column-mode 1))
    :hook (org-mode . my/org-mode-visual-fill)
    (markdown-mode . my/org-mode-visual-fill))
#+end_src

*** Markdown Mode
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-markdown-mode"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+end_src

*** Vertico
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-vertico"
  "emacs-orderless"
#+end_src
:END:
#+begin_src emacs-lisp
  (defun my/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
    folder, otherwise delete a character backward"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
      (delete-backward-char arg)))
  
  (use-package vertico
    :init
    (vertico-mode)
    (setq vertico-cycle t)
    (setq vertico-resize t)
    :bind
    (:map vertico-map
          ("C-j" . vertico-next)
          ("C-k" . vertico-previous))
    (:map minibuffer-local-map
          ("<backspace>" . my/minibuffer-backward-kill)))
  
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))
          selectrum-highlight-candidates-function #'orderless-highlight-matches))
  
  ;; Persist history over Emacs restarts. Vertico sorts by history position. 
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

*** Selectrum
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-selectrum"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package selectrum)
#+end_src

*** Consult
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-consult"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package consult
    :bind
    ("C-s" . consult-line))
#+end_src

*** Dotcrafter

#+begin_src emacs-lisp
  (use-package dotcrafter
    :load-path "~/Projects/Code/dotcrafter.el/"
    :config
    (dotcrafter-mode)
    :custom
    (dotcrafter-config-files-directory "config")
    (dotcrafter-ensure-output-directories
     '(".gnupg" ".local/share" ".config/emacs" ".bin"))
    (dotcrafter-org-files
     '("README.org" "Emacs.org" "Workflow.org" "System.org" "Desktop.org" "Environment.org")))
#+end_src

*** DEAD Embark
CLOSED: [2021-08-29 Sun 20:58]
:LOGBOOK:
- State "DEAD"       from              [2021-08-29 Sun 20:58] \\
  not used
:END:
:GUIX:
#+begin_src scheme :tangle no
  "emacs-embark"
#+end_src
:END:

#+begin_src emacs-lisp :tangle no
  
  (use-package embark
  
    :bind
    (("m-o" . embark-act))         ;; pick some comfortable binding
  
    :config
  
    ;; hide the mode line of the embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*embark collect \\(live\\|completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
#+end_src

*** marginalia
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-marginalia"
#+end_src
:END:

#+begin_src emacs-lisp
  
  (use-package marginalia
    ;; Either bind `marginalia-cycle` globally or only in the minibuffer
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
  
    ;; The :init configuration is always executed (Not lazy!)
    :init
  
    ;; Must be in the :init section of use-package such that the mode gets
    ;; enabled right away. Note that this forces loading the package.
    (marginalia-mode))
#+end_src

*** app-launcher

#+begin_src emacs-lisp
  (use-package app-launcher
    :straight '(app-launcher
                :host github
                :repo "SebastienWae/app-launcher")
    :config
    (dolist (profiles '("largenlong/largenlong"
                        "apps/apps"
                        "desktop/desktop"
                        "emacs/emacs"))
      (add-to-list 'app-launcher-apps-directories (concat (getenv "HOME") "/.guix-extra-profiles"
                                                          "/" profiles
                                                          "/share/applications")))
    (add-to-list 'app-launcher-apps-directories (concat (getenv "HOME") "/.local/share/flatpak/exports/share")))
#+end_src

*** DEAD Ivy 
CLOSED: [2021-08-28 Sat 16:49]
:LOGBOOK:
- State "DEAD"       from              [2021-08-28 Sat 16:49] \\
  Droped in favor of =vertico=
:END:
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-ivy"
#+end_src
:END:

#+begin_src emacs-lisp :tangle no
  (use-package ivy
    :disabled t
    :diminish t
    :bind (:map ivy-minibuffer-map
                ("TAB" . ivy-alt-done)	
                ("C-l" . ivy-alt-done)
                ("C-j" . ivy-next-line)
                ("C-k" . ivy-previous-line)
                :map ivy-switch-buffer-map
                ("C-k" . ivy-previous-line)
                ("C-j" . ivy-next-line)
                ("C-l" . ivy-done)
                ("C-d" . ivy-switch-buffer-kill)
                :map ivy-reverse-i-search-map
                ("C-k" . ivy-previous-line)
                ("C-j" . ivy-next-line)
                ("C-d" . ivy-reverse-i-search-kill)))
  
#+end_src

*** DEAD Counsel
CLOSED: [2021-08-28 Sat 16:50]
:LOGBOOK:
- State "DEAD"       from              [2021-08-28 Sat 16:50] \\
  Droped in favor of =consult=
:END:
:GUIX:
#+begin_src scheme noweb-ref packages :tangle no
  "emacs-counsel"
#+end_src
:END:
#+begin_src emacs-lisp :tangle no
  (use-package counsel
    :disabled t
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-switch-buffer-other-window))
    :custom
    ((counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)))
  
#+end_src

*** DEAD Ivy Rich
CLOSED: [2021-08-28 Sat 16:51]
:LOGBOOK:
- State "DEAD"       from              [2021-08-28 Sat 16:51] \\
  droped in favor of =marginalia=
:END:
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-ivy-rich"
#+end_src
:END:
#+begin_src emacs-lisp :tangle no
  
  (use-package ivy-rich
    :disabled
    :after ivy)
  
#+end_src

*** Projectile
:GUIX:
#+begin_src scheme :noweb-ref packages
  "emacs-projectile"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    ;;:custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map))
  ;; NOTE: Set this to the folder where you keep your Git repos!
#+end_src

**** DEAD Counsel-Projectile
CLOSED: [2021-08-30 Mon 06:38]
:LOGBOOK:
- State "DEAD"       from              [2021-08-30 Mon 06:38] \\
  not using counsel
:END:
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-counsel-projectile"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :disabled t
    :after projectile
    :config (counsel-projectile-mode))
#+end_src

*** Magit
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-magit"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package magit
    :config (evil-collection-magit-setup)
    :general
    (:prefix-map 'my-leader-map
                 "g" '(magit :which-key "Status")))
#+end_src

*** Pass
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-pass"
  "emacs-pinentry"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package pass)
  (use-package pinentry
    :config
    (pinentry-start))
#+end_src

*** Helpful
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-helpful"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+end_src

*** Doom
**** Doom Themes
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-doom-themes"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package doom-themes
    :init
    (disable-theme 'deeper-blue)
    (load-theme (car emacs-theme) t))
#+end_src

**** Doom Modeline 
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-all-the-icons"
  "emacs-doom-modeline"
#+end_src
:END:
NOTE: The first time you load your configuration on a new machine, you'll
need to run the following command interactively so that mode line icons
display correctly:

=M-x all-the-icons-install-fonts=

#+begin_src emacs-lisp
  (use-package all-the-icons)
  
  (use-package doom-modeline
    :init (doom-modeline-mode t)
    :custom ((doom-mode-line-height 13)))
#+end_src

*** Rainbow Delimiters
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-rainbow-delimiters"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Which-Key
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-which-key"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))
#+end_src

*** Swiper
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-swiper"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package swiper)
#+end_src

*** PDF view
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-pdf-tools"
#+end_src
:END:
#+begin_src emacs-lisp
#+end_src

*** Perspective
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-perspective"
#+end_src
:END:
#+begin_src emacs-lisp
  (use-package perspective
    :init
    (persp-mode))
#+end_src

** Provide package
#+begin_src emacs-lisp
  (provide 'user-config-emacs)
#+end_src

* exwm
Now we return to =init.el= for the rest of the config.
:GUIX:
#+begin_src scheme :noweb-ref packages :tangle no
  "emacs-exwm"
  "emacs-desktop-environment"
#+end_src
:END:
load in exwm
#+begin_src emacs-lisp
  (defun my/exwm-load (switch)
    (config-desktop-mode 1))
  (add-to-list 'command-switch-alist '("-exwm" . my/exwm-load))
#+end_src

* Runtime Optimization

Returns the garbage collector to a sane value.
#+begin_src emacs-lisp
  (defun my/post-config () "Sets the `gc-cons-threshold' to a sane value and loads the custom file, among other things"
         (require 'org)
         (setq gc-cons-threshold (* 2 1000 1000))
         (load custom-file :noerror)
         (setq my/post-config t))
  
  ;; Returns nil if switch is absent
  (defun found-custom-arg (switch) "Returns nil if switch is absent"
         (let ((found-switch (member switch command-line-args)))
           found-switch))
  
  ;; if exwm isn't running set custom variables
  (unless (found-custom-arg "-exwm")
    (my/post-config))
#+end_src

* Manifest
:PROPERTIES:
:header-args: :tangle config/.config/guix/manifests/emacs.scm :mkdirp t
:GUIX: test
:END:
:HEADER:
#+NAME: manifest-header
#+begin_src emacs-lisp :tangle no
  (user-config-generate-file-header "Emacs.org" "emacs.scm")
#+end_src
#+begin_src scheme :noweb yes
  <<manifest-header()>>
#+end_src
:END:
Guix Manifest
config/.config/guix/manifests/emacs.scm
#+begin_src scheme :noweb yes
  (specifications->manifest
   (list "emacs-native-comp"
	 "emacs-guix"
	 "emacs-org-bullets"
	 "emacs-org-roam"
	 <<packages>>))
#+end_src



